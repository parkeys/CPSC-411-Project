/**
 * JavaCC file
 */
 
options {
  JDK_VERSION = "1.6";
  STATIC = false;
}
PARSER_BEGIN(JCCExpressionsParser)
package parser.jcc;

import ast.*;
import java.util.ArrayList;
import java.util.List;

public class JCCExpressionsParser {
}

PARSER_END(JCCExpressionsParser)

SKIP :
{
 	" "
|	"\r"
|	"\t"
|	"\n"
|	< MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/" >
|   < SINGLE_LINE_COMMENT: "//" (~["\n"])* >
}

TOKEN : /* KEYWORDS */
{	
	<PRINT:		"print" >
}
TOKEN : /* SEPARATORS and OPERATORS*/
{	<LPAREN: "(">
|	<RPAREN: ")">
|	<ASSIGN: "=">
|	<QUESTION:	 "?">
|	<COLON:	 ":" >
|	<PLUS:	 "+" >
|	<MINUS:  "-" >
|	<MULT:   "*" >
|	<SMALLER:"<">
|	<NOT:	 "!">
| 	<SEMICOLON:	 ";" >
|	< RETURN: "return" >
|	< INTEGER_TYPE: "int" >
|	< BOOLEAN_TYPE: "boolean" >
}
	
TOKEN :
{   < INTEGER_LITERAL: ( <DIGIT> )+ >
|   < IDENTIFIER: <LETTER> (<LETTER> | "_" | <DIGIT>)* >
|   < #LETTER: ["A" - "Z", "a" - "z"] >
|   < #DIGIT: ["0" - "9"] >
}

Program Program() : { 
	NodeList<Statement> ss = new NodeList<Statement>();
	Statement s; 
	Expression e;
}{	( s=Statement()
		{ ss.add(s); } 
	)*
	< PRINT > e = Expression()
	<EOF>
	{ return new Program(ss, new Print(e)); }
}
Statement Statement() : {
	Statement s;
}
{	
	s=Assign()						{ return s; }
	| s=FunctionDeclaration()		{ return s; }
}

Statement FunctionDeclaration() : {
	Type t;
	String name;
	FormalList parameters;
	NodeList<Statement> body = new NodeList<Statement>();
	Statement a;
	Expression returnVal;
}
{	t=Type()
	name=Identifier()
	"(" 
	parameters=FormalList()
	")"
	"{"
	( a=Assign()
		{ body.add(a); } 
	)*
	"return"
	returnVal=Expression()
	";"
	"}"
		{ return new FunctionDeclaration(t, name, parameters, body, returnVal); }
}

Statement Assign() : {
	String name;
	Expression value;
}
{	name=Identifier() 
	"="
	value=Expression() ";"
		{return new Assign(name, value); }
}

FormalList FormalList() : {
	List<String> ids = new ArrayList<String>();
	NodeList<Type> ts = new NodeList<Type>();
	String id;
	Type t;
}
{
	( t=Type()
		{ ts.add(t); } 
	id=Identifier()
		{ ids.add(id); }
		
		( ","
		t=Type()
			{ ts.add(t); } 
		id=Identifier()
			{ ids.add(id); }
		)*
	)?
		{return new FormalList(ids, ts); }
}


Expression Expression() : {
	Expression e, e2, e3;
}
{	e=CompExpression() 
	( "?" e2 = Expression()
	  ":" e3 = Expression()
		{	e = new Conditional(e, e2, e3); }
	)?
	{ return e; }
}

ExpressionList ExpressionList() : {
	NodeList<Expression> es = new NodeList<Expression>();
	Expression e;
}
{
	(e = Expression()
		{ es.add(e); }
	(","
	e = Expression()
		{ es.add(e); }
	)*
	)?
	{return new ExpressionList(es); }
}

// For parsing anything with priority same or higher than <
Expression CompExpression() : {
	Expression e, e2;
}
{ 	e=AddExpression() 
	( "<" e2=AddExpression() 
		{ e = new LessThan(e, e2); }
	)?
	{ return e; }
}
// For parsing anything with priority same or higher than +
Expression AddExpression() : {
	Expression e, e2;
	Token op;
}
{	e=MultExpression() 
	( 	(op="+"|op="-") 
		e2=MultExpression() 
			{ if (op.image.equals("+"))
				e=new Plus(e, e2);
			  else
			  	e=new Minus(e, e2);
			}	
	)*
	{ return e; }
}

// For parsing anything with priority same or higher than *
Expression MultExpression() :  {
	Expression e, e2;
}
{	e=NotExpression() 
	(	"*" e2=NotExpression()
			{ e = new Times(e, e2); } 
	)*
	{ return e; }
}

Type Type() : {
	Token t;
}
{
	t=<INTEGER_TYPE>
		{return new IntegerType();}
|	t=<BOOLEAN_TYPE>
		{return new BooleanType();}
}	

// For parsing anything with priority same or higher than ! expressions:
Expression NotExpression() : {
	Expression e;
}
{ 	"!" e=NotExpression()
		{ return new Not(e); }
| 	e=PrimaryExpression()
		{ return e; }
}
        
/* PrimaryExpression is the expression that has highest precedence.*/
Expression PrimaryExpression() : {
	Token t;
	String i, f;
	Expression e;
	ExpressionList el;
}
{ t=<INTEGER_LITERAL>					{ return new IntegerLiteral(t.image); }
| "(" e=Expression() ")"				{ return e; }
| i=Identifier()
(  
	"("
	el=ExpressionList()
	")"
)?										{ return new IdentifierExp(i); }
}

String Identifier() : {
	Token i;
}
{
	i = <IDENTIFIER>
	{ return i.image; }
}